'''
Извлечение небольшого фрагмента текста из большого блока текста является сложной задачей.
В Python, строки имеют методы для поиска и замены: index(), find(), split(), count(), replace(), и с.
Но эти методы ограничены простейшими случаями. Например, index()метод ищет одну жестко запрограммированную подстроку,
а поиск всегда чувствителен к регистру. Чтобы выполнить поиск строки s без учета регистра , вы должны вызвать s.lower()или s.upper()и убедиться, что строки поиска соответствуют подходящему регистру . replace()И split()методы имеют то же ограничение.

Если ваша цель может быть достигнута строковыми методами, вы должны их использовать.
Они быстрые и простые и легкие для чтения, и есть много, что можно сказать о быстром, простом и читаемом коде. Но если вы обнаружите, что используете множество различных строковых функций с ifоператорами для обработки особых случаев, или если вы объединяете в цепочку вызовы split()и join()нарезку строк, вам может потребоваться перейти к регулярным выражениям.

МЕТОДЫ РЕГУЛЯРНЫХ ВЫРАЖЕНИЙ
^ - соответствует началу строки.

$ - соответствует концу строки.

\b - соответствует границе слова.

\d - соответствует любой числовой цифре.

\D - соответствует любому нечисловому символу.

x? - соответствует необязательному x-символу (другими словами, он соответствует x-нулю или
одному разу).

x* - соответствует xнулю или более раз.

x+ - соответствует xодному или нескольким разам.

x{n,m} - соответствует xперсонажу хотя бы nраз, но не чаще m.

(a|b|c) - соответствует точно одному из a, b или c.

(x) - в общем это запоминающаяся группа . Вы можете получить значение того,
что соответствует, используя groups()метод объекта, возвращаемого re.search.

'''

# ПРИМЕР ИЗ ПРАКТИКИ: УЛИЧНЫЕ АДРЕСА
s = '100 NORTH MAIN ROAD'
print(s.replace('ROAD', 'RD.'))
s = '100 NORTH BROAD ROAD'
print(s.replace('ROAD', 'RD.'))
s[:-4] + s[-4:].replace('ROAD', 'RD.')

'''
	Посмотрите на первый параметр: 'ROAD$'. Это простое регулярное выражение
	которое соответствует 'ROAD'только тогда, когда оно встречается в конце строки
	В $означает «конец строки» . (Существует соответствующий символ, символ каретки
	что означает «начало строки».) Используя re.sub()функцию
	вы ищете в строке s регулярное выражение 'ROAD$'и заменяете его на 'RD.'
	Это соответствует ROADв конце строки s 
	но не соответствует ROAD части слова BROAD, потому что она находится в середине s .
'''
import re
print(re.sub('ROAD$', 'RD.', s))


d = '100 BROAD'
print(re.sub('ROAD$', 'RD.', d))
# Вы используете \b, что означает «здесь должна быть граница слова»
print(re.sub('\\bROAD$', 'RD.', d))
# Вы можете использовать то, что называется необработанной строкой , добавив строку с буквой - r
# Чтобы не использовать \\b
print(re.sub(r'\bROAD$', 'RD.', d))

s = '100 BROAD ROAD APT. 3'
# Поскольку ROAD не в конце, вернет исходную фразу
print(re.sub(r'\bROAD$', 'RD.', s))
# Убираем $ и добавлем в конце строки \b
# Теперь регулярное выражение гласит: «совпадать, c
# 'ROAD'когда это целое слово в любом месте строки»,
# будь то в конце, начале или где-то посередине
print(re.sub(r'\bROAD\b', 'RD.', s))


# ПРИМЕР: РИМСКИЕ ЦИФРЫ
import re
'''
M - это тысяча!!!
Эта модель состоит из трех частей. ^-соответствует тому, что следует только в начале строки. 
Если бы это не было указано, шаблон соответствовал бы независимо от того, 
где M-были символы, а это не то, что вам нужно. 
Вы хотите убедиться, что M-символы, если они есть, находятся в начале строки. 

M?-необязательно соответствует одному M-символу. 
Поскольку это повторяется три раза, вы подходите от нуля до трех M-символов подряд. 
И $соответствует концу строки. 

В сочетании с ^-символом в начале это означает, что шаблон должен соответствовать всей строке, 
без каких-либо других символов до или после M-символов
'''
pattern = '^M?M?M?$'
'''
	Суть re-модуля - search()-функция, которая принимает регулярное выражение ( шаблон ) 
	и строку ( 'M'), чтобы попытаться сопоставить регулярное выражение. 
	Если совпадение найдено, search()возвращает объект, 
	который имеет различные методы для описания совпадения;
	если совпадение не найдено, search()возвращается Noneзначение Python null.
	Все, что вас волнует в данный момент, это соответствие шаблона,
	что вы можете узнать, просто взглянув на возвращаемое значение search().
	'M'соответствует этому регулярному выражению, потому что первое необязательное M-совпадение, 
	а второй и третий необязательные Mсимволы игнорируются.
'''
print(re.search(pattern, 'M'))

print(re.search(pattern, 'MM'))

print(re.search(pattern, 'MMM'))
print(re.search(pattern, 'MMMM'))
print(re.search(pattern, ''))

# ПРОВЕРКА НА СОТНИ
import re
pattern = '^M?M?M?(CM|CD|D?C?C?C?)$'
'''
	Этот шаблон начинается так же, как и предыдущий, проверяя начало строки ( ^), 
	затем тысячи мест ( M?M?M?). Тогда это имеет новая часть, в скобках - (), 
	который определяет набор из трех взаимно исключающих друг друга проверок, 
	разделенных вертикальной чертой - |: 
	CM, CD и D?C?C?C?(который является необязательным D-последующим нуля до трех дополнительных 
	C-символов). Синтаксический анализатор регулярных выражений проверяет 
	каждый из этих шаблонов по порядку (слева направо), 
	берет первый соответствующий шаблон и игнорирует остальные
'''
print(re.search(pattern, 'MCM'))

print(re.search(pattern, 'MD'))

print(re.search(pattern, 'MMMCCC'))

print(re.search(pattern, 'MCMC'))
print(re.search(pattern, ''))

# ИСПОЛЬЗОВАНИЕ {n, m} СИНТАКСИСА
import re
pattern = '^M?M?M?$'
print(re.search(pattern, 'M'))
print(re.search(pattern, 'MM'))
print(re.search(pattern, 'MMM'))
print(re.search(pattern, 'MMMM'))
'''
	Этот паттерн гласит: «Сопоставьте начало строки, затем от нуля до трех M-символов
	затем конец строки». 0 и 3 могут быть любыми числами; 
	если вы хотите сопоставить хотя бы один, но не более трех M-символов,
	вы можете сказать M{1,3}
'''
pattern = '^M{0,3}$'
print(re.search(pattern, 'M'))
print(re.search(pattern, 'MM'))
print(re.search(pattern, 'MMM'))
print(re.search(pattern, 'MMMM'))


pattern = '^M?M?M?(CM|CD|D?C?C?C?)(XC|XL|L?X?X?X?)$'
print(re.search(pattern, 'MCMXL'))
print(re.search(pattern, 'MCML'))
print(re.search(pattern, 'MCMLX'))
print(re.search(pattern, 'MCMLXXX'))
print(re.search(pattern, 'MCMLXXXX'))

pattern = '^M?M?M?(CM|CD|D?C?C?C?)(XC|XL|L?X?X?X?)(IX|IV|V?I?I?I?)$'
print(re.search(pattern, 'MCMXLI'))
print(re.search(pattern, 'MCMLII'))
print(re.search(pattern, 'MCMLXIV'))
print(re.search(pattern, 'MCMLXXXVII'))
print(re.search(pattern, 'MCMLXXXX'))

# X{0, 3}-одному из трех возможных X
pattern = '^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$'
print(re.search(pattern, 'MDLV'))
print(re.search(pattern, 'MMDCLXVI'))
print(re.search(pattern, 'MMMDCCCLXXXVIII'))
print(re.search(pattern, 'I'))

# ПОДРОБНЫЕ РЕГУЛЯРНЫЕ ВЫРАЖЕНИЯ
pattern = '''
    ^                   # beginning of string
    M{0,3}              # thousands - 0 to 3 Ms
    (CM|CD|D?C{0,3})    # hundreds - 900 (CM), 400 (CD), 0-300 (0 to 3 Cs),
                        #            or 500-800 (D, followed by 0 to 3 Cs)
    (XC|XL|L?X{0,3})    # tens - 90 (XC), 40 (XL), 0-30 (0 to 3 Xs),
                        #        or 50-80 (L, followed by 0 to 3 Xs)
    (IX|IV|V?I{0,3})    # ones - 9 (IX), 4 (IV), 0-3 (0 to 3 Is),
                        #        or 5-8 (V, followed by 0 to 3 Is)
    $                   # end of string
    '''
print(re.search(pattern, 'M', re.VERBOSE))
print(re.search(pattern, 'MCMLXXXIX', re.VERBOSE))
print(re.search(pattern, 'MMMDCCCLXXXVIII', re.VERBOSE))
print(re.search(pattern, 'M'))

# АНАЛИЗ ТЕЛЕФОННЫХ НОМЕРОВ
# ^ - начало строки
# \d{x} - любая цифра от 0 до 9, {x} - количество цифр
# "-" - сопоставить буквальный дефис
# $ - конец строки
phonePattern = re.compile(r'^(\d{3})-(\d{3})-(\d{4})$')
print(phonePattern.search('800-555-1212').groups())
'''
И вот почему вы никогда не должны «цепь» search()и groups()метода производства кода. 
Если search()метод не возвращает совпадений, возвращается None, 
а не объект сопоставления с регулярным выражением. 
Вызов None.groups()вызывает совершенно очевидное исключение: Noneнет groups()метода. (
Конечно, это немного менее очевидно, 
когда вы получаете это исключение из глубины вашего кода.
'''
# print(phonePattern.search('800-555-1212-1234').groups())

# ОБРАБОТКА РАЗДЕЛИТЕЛЕЙ МЕЖДУ РАЗЛИЧНЫМИ ЧАСТЯМИ ТЕЛЕФОНА
# \D+ - соответствует любому символу, кроме цифры, и + - означает «1 или более»
# это разделитель номера телефона, как в прошлом примере "-"
phonePattern = re.compile(r'^(\d{3})\D+(\d{3})\D+(\d{4})\D+(\d+)$')
print(phonePattern.search('800 555 1212 1234').groups())
print(phonePattern.search('800-555-1212-1234').groups())
print(phonePattern.search('80055512121234'))
print(phonePattern.search('800-555-1212'))

# ОБРАБОТКА НОМЕРА ТЕЛЕФОНА БЕЗ РАЗДЕЛИТЕЛЯ

# \D* - значит любой символ, как разделитель или его вообще нет
# \d* - значит 0 или больше
phonePattern = re.compile(r'^(\d{3})\D*(\d{3})\D*(\d{4})\D*(\d*)$')
print(phonePattern.search('80055512121234').groups())
print(phonePattern.search('800.555.1212 x1234').groups())
print(phonePattern.search('800-555-1212').groups())
# Перед кодом области есть дополнительный символ, но регулярное выражение предполагает,
# что код области - это первое, что находится в начале строки
print(phonePattern.search('(800)5551212 x1234'))

# Обработка начальных символов в номерах
# Сопоставляете \D* - ноль
# или более нечисловых символов перед первой запомненной группой (кодом города)
phonePattern = re.compile(r'^\D*(\d{3})\D*(\d{3})\D*(\d{4})\D*(\d*)$')
print(phonePattern.search('(800)5551212 ext. 1234').groups())
print(phonePattern.search('800-555-1212').groups())
# 1 -код города перед, но вы предполагали,
# что все первые символы перед кодом города были не числовыми ( \D*), т. е "1" перед словом work
print(phonePattern.search('work 1-(800) 555.1212 #1234'))

# Убрали "^", т.е. нет сопастовления с началом строки
phonePattern = re.compile(r'(\d{3})\D*(\d{3})\D*(\d{4})\D*(\d*)$')
print(phonePattern.search('work 1-(800) 555.1212 #1234').groups())
print(phonePattern.search('800-555-1212').groups())
print(phonePattern.search('80055512121234').groups())


# ПОДРОБНОЕ РЕГУЛЯРНОЕ ВЫРАЖЕНИЕ
phonePattern = re.compile(r'''
                # don't match beginning of string, number can start anywhere
    (\d{3})     # area code is 3 digits (e.g. '800')
    \D*         # optional separator is any number of non-digits
    (\d{3})     # trunk is 3 digits (e.g. '555')
    \D*         # optional separator
    (\d{4})     # rest of number is 4 digits (e.g. '1212')
    \D*         # optional separator
    (\d*)       # extension is optional and can be any number of digits
    $           # end of string
    ''', re.VERBOSE)
print(phonePattern.search('work 1-(800) 555.1212 #1234').groups())
print(phonePattern.search('800-555-1212'))